{"version":3,"file":"ord.config.js","sourceRoot":"","sources":["../ord.config.ts"],"names":[],"mappings":"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","sourcesContent":["import {EqField, EqConfig} from \"decorator-eq/eq.typeclass\";\r\nimport {IField, TFieldValue} from \"decorator-eq/eq.interface\";\r\nimport {IOrd, isOrd, TDirection, IFieldProperty, IOrdField, isFieldOrd, IOrdConfig} from \"./ord.interface\";\r\n\r\nexport {IField, TFieldValue};\r\n\r\nexport class Field extends EqField implements IOrdField{\r\n\r\n    public dir:TDirection;\r\n\r\n    public map:Array<string>;\r\n\r\n    constructor(public name:string, props:IFieldProperty) {\r\n        super(name);\r\n        this.map = ('map' in props) ? props.map : [];\r\n        this.dir = ('dir' in props) ? props.dir : \"ASC\"\r\n    }\r\n\r\n    public greater(a:IOrd, b:IOrd):boolean {\r\n        let vals = [this.value(a), this.value(b)];\r\n        if (vals[0] === null || vals[1] === null || vals[0] === vals[1]) {\r\n            return null;\r\n        } else {\r\n            if (isOrd(vals[0])) {\r\n                return (this.dir == \"ASC\") ? (<IOrd> vals[0]).greater(<IOrd> vals[1]) : (<IOrd> vals[0]).less(<IOrd> vals[1]);\r\n            } else {\r\n                return (this.dir == \"ASC\") ? (vals[0] > vals[1]) : (vals[0] < vals[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public less(a:IOrd, b:IOrd):boolean {\r\n        let vals = [this.value(a), this.value(b)];\r\n        if (vals[0] === null || vals[1] === null || vals[0] === vals[1]) {\r\n            return null;\r\n        } else {\r\n            if (isOrd(vals[0])) {\r\n                return (this.dir == \"ASC\") ? (<IOrd> vals[0]).less(b) : (<IOrd> vals[0]).greater(b);\r\n            } else {\r\n                return (this.dir == \"ASC\") ? (vals[0] < vals[1]) : (vals[0] > vals[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public value(object:IOrd):TFieldValue {\r\n        let val = object[this.name];\r\n        if (val === null) {\r\n            return null;\r\n        }\r\n        if (this.map.length) {\r\n            return this.map.indexOf(object[this.name]);\r\n        } else {\r\n            return super.value(object);\r\n        }\r\n    }\r\n\r\n    public clone():Field{\r\n        return new Field(this.name, {map:this.map,dir:this.dir,ordinality:-2});\r\n    }\r\n}\r\n\r\nexport class OrdConfig extends EqConfig implements IOrdConfig {\r\n\r\n    protected _ordFields:Array<IOrdField> = [];\r\n\r\n    public clone():OrdConfig {\r\n        let res = <OrdConfig> super.clone();\r\n        res.ordFields = [];\r\n        this.ordFields.forEach((field:Field) => res.ordFields.push(field.clone()));\r\n        this.eqFields.forEach((field:EqField) => res.eqFields.push(field.clone()));\r\n        return res;\r\n    }\r\n\r\n    public set fields(fields:Array<IField>) {\r\n        this._fields = fields;\r\n        this._fields.forEach((field:IField) => {\r\n            if (isFieldOrd(field)) {\r\n                this._ordFields.push(<IOrdField> field);\r\n            }\r\n        });\r\n    }\r\n\r\n    public get fields():Array<IField> {\r\n        return (<IField[]> this._ordFields).concat(this._fields);\r\n    }\r\n\r\n    public get eqFields():Array<EqField> {\r\n        return this._fields;\r\n    }\r\n\r\n    public get ordFields():Array<IOrdField> {\r\n        return this._ordFields;\r\n    }\r\n\r\n    public static setOrdnialityOfField(name:string, fields:Array<IField>, newIndex = 0) {\r\n        let oldKey = fields.findIndex((field:IField) => {\r\n            return (field.name === name);\r\n        });\r\n        fields.splice(newIndex, 0, fields.splice(oldKey, 1)[0]);\r\n    }\r\n}\r\n"]}