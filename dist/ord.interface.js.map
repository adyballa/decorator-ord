{"version":3,"file":"ord.interface.js","sourceRoot":"","sources":["../ord.interface.ts"],"names":[],"mappings":";AAkBA,oBAA2B,MAAU;IACjC,MAAM,CAAC,CAAC,MAAM,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM,CAAC,CAAC;AACjD,CAAC;AAFe,kBAAU,aAEzB,CAAA;AAeD,eAAsB,MAAU;IAC5B,MAAM,CAAC,CAAC,OAAO,MAAM,KAAK,QAAQ,IAAI,SAAS,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,CAAC,CAAC;AACnF,CAAC;AAFe,aAAK,QAEpB,CAAA","sourcesContent":["import {IEq, IField, IEqConfig, isEq} from \"decorator-eq/eq.interface\";\r\nimport {EqField} from \"decorator-eq\";\r\n\r\nexport interface IOrdFieldProperty {\r\n    ordinality:number,\r\n    dir?:TDirection,\r\n    map?:Array<string>\r\n}\r\n\r\nexport type TDirection = \"ASC\" | \"DESC\";\r\n\r\nexport interface IOrdField extends IField{\r\n    dir:TDirection;\r\n    map:Array<string>;\r\n    greater:(a:IOrd, b:IOrd)=>boolean;\r\n    less:(a:IOrd, b:IOrd)=>boolean;\r\n}\r\n\r\nexport function isFieldOrd(object:any):object is IOrdField {\r\n    return ('name' in object && 'map' in object);\r\n}\r\n\r\nexport interface IOrdConfig extends IEqConfig {\r\n    ordFields:Array<IOrdField>\r\n    eqFields:Array<EqField>\r\n}\r\n\r\nexport interface IOrd extends IEq {\r\n    [name:string]:any;\r\n    greater(a:IOrd):boolean,\r\n    greater(a:IOrd, config:IOrdConfig):boolean,\r\n    less(a:IOrd):boolean,\r\n    less(a:IOrd, config:IOrdConfig):boolean\r\n}\r\n\r\nexport function isOrd(object:any):object is IOrd {\r\n    return (typeof object === \"object\" && 'greater' in object && 'less' in object);\r\n}\r\n"]}