{"version":3,"file":"ord.interface.js","sourceRoot":"","sources":["../ord.interface.ts"],"names":[],"mappings":";AAkBA,oBAA2B,MAAU;IACjC,MAAM,CAAC,CAAC,MAAM,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM,CAAC,CAAC;AACjD,CAAC;AAFe,kBAAU,aAEzB,CAAA;AAeD,eAAsB,MAAU;IAC5B,MAAM,CAAC,CAAC,OAAO,MAAM,KAAK,QAAQ,IAAI,SAAS,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,CAAC,CAAC;AACnF,CAAC;AAFe,aAAK,QAEpB,CAAA","sourcesContent":["import {IEq, IField, IEqConfig} from \"decorator-eq/eq.interface\";\nimport {EqField} from \"decorator-eq/eq.typeclass\";\n\nexport interface IFieldProperty {\n    ordinality:number,\n    dir?:TDirection,\n    map?:Array<string>\n}\n\nexport type TDirection = \"ASC\" | \"DESC\";\n\nexport interface IOrdField extends IField{\n    dir:TDirection;\n    map:Array<string>;\n    greater:(a:IOrd, b:IOrd)=>boolean;\n    less:(a:IOrd, b:IOrd)=>boolean;\n}\n\nexport function isFieldOrd(object:any):object is IOrdField {\n    return ('name' in object && 'map' in object);\n}\n\nexport interface IOrdConfig extends IEqConfig {\n    ordFields:Array<IOrdField>\n    eqFields:Array<EqField>\n}\n\nexport interface IOrd extends IEq {\n    [name:string]:any;\n    greater(a:IOrd):boolean,\n    greater(a:IOrd, config:IOrdConfig):boolean,\n    less(a:IOrd):boolean,\n    less(a:IOrd, config:IOrdConfig):boolean\n}\n\nexport function isOrd(object:any):object is IOrd {\n    return (typeof object === \"object\" && 'greater' in object && 'less' in object);\n}\n"]}