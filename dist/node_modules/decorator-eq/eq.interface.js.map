{"version":3,"file":"eq.interface.js","sourceRoot":"","sources":["../../../node_modules/decorator-eq/eq.interface.ts"],"names":[],"mappings":";AAkBA,cAAqB,MAAU;IAC3B,MAAM,CAAC,CAAC,OAAO,MAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM,CAAC,CAAC;AAC7E,CAAC;AAFe,YAAI,OAEnB,CAAA","sourcesContent":["export interface IEq {\r\n    [name:string]:any;\r\n    eq(a:IEq):boolean,\r\n    eq(a:IEq, config:IEqConfig):boolean;\r\n    neq(a:IEq):boolean\r\n    neq(a:IEq, config:IEqConfig):boolean;\r\n}\r\n\r\nexport interface IFieldProperty {\r\n    fuzzy?:boolean\r\n}\r\n\r\nexport interface IEqProps {\r\n    config?:IEqConfig;\r\n}\r\n\r\nexport type TFieldValue = number | string | IEq;\r\n\r\nexport function isEq(object:any):object is IEq {\r\n    return (typeof object === 'object' && 'eq' in object && 'neq' in object);\r\n}\r\n\r\nexport interface IEqConfig {\r\n    fields:Array<IField>,\r\n    clone:()=>IEqConfig\r\n}\r\n\r\nexport interface IField {\r\n    name:string;\r\n    eq:(a:IEq, b:IEq)=>boolean;\r\n    neq:(a:IEq, b:IEq)=>boolean;\r\n    value:(object:IEq)=>TFieldValue;\r\n    clone:()=>IField;\r\n}\r\n"]}